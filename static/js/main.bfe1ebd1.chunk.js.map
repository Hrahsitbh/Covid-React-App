{"version":3,"sources":["api/index.js","components/Cards/Cards.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","index.js"],"names":["url","fetchData","country","a","modifiedUrl","axios","get","data","confirmed","recovered","deaths","countryDetail","lastUpdate","alert","response","error","message","fetchDailyData","modifiedData","total","reportDate","map","dailyData","date","fetchCountries","countries","name","cardsData","infected","title","text","Cards","props","Date","toDateString","className","Grid","container","spacing","justify","Object","keys","item","index","xs","md","key","component","Card","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Chart","useState","setDailyData","useEffect","fetchDailyDataAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barchart","options","legend","display","CountryPicker","handleCountires","setCountries","selectedCountry","useCallback","event","target","FormControl","NativeSelect","defaultValue","onChange","App","state","bind","fetchedData","setState","chosenCountry","this","console","log","src","alt","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bfe1ebd1.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport async function fetchData(country) {\n    let modifiedUrl = url;\n    if (country) {\n        modifiedUrl = `${url}/countries/${country}`;\n    }\n    try {\n        const { data: { confirmed, recovered, deaths, countryDetail, lastUpdate } = {} } = await axios.get(modifiedUrl);\n        return { confirmed, recovered, deaths, countryDetail, lastUpdate };\n    } catch (error) {\n        alert(error.response?.data?.error?.message);\n    }\n}\n\nexport async function fetchDailyData() {\n    try {\n        // const { data } = await axios.get(`${url}/daily`);\n        let data = [\n            {\n                confirmed: { total: 4000 },\n                deaths: { total: 40 },\n                reportDate: \"2020-01-22\"\n            },\n            {\n                confirmed: { total: 5000 },\n                deaths: { total: 100 },\n                reportDate: \"2020-01-24\"\n            },\n            {\n                confirmed: { total: 6000 },\n                deaths: { total: 200 },\n                reportDate: \"2020-01-26\"\n            },\n            {\n                confirmed: { total: 3000 },\n                deaths: { total: 700 },\n                reportDate: \"2020-01-29\"\n            },\n            {\n                confirmed: { total: 4000 },\n                deaths: { total: 1000 },\n                reportDate: \"2020-02-01\"\n            },\n            {\n                confirmed: { total: 5000 },\n                deaths: { total: 2000 },\n                reportDate: \"2020-02-05\"\n            },\n            {\n                confirmed: { total: 6000 },\n                deaths: { total: 2200 },\n                reportDate: \"2020-02-07\"\n            },\n            {\n                confirmed: { total: 10000 },\n                deaths: { total: 3200 },\n                reportDate: \"2020-02-08\"\n            },\n            {\n                confirmed: { total: 20000 },\n                deaths: { total: 4400 },\n                reportDate: \"2020-02-09\"\n            },\n            {\n                confirmed: { total: 40000 },\n                deaths: { total: 5000 },\n                reportDate: \"2020-02-12\"\n            },\n            {\n                confirmed: { total: 50000 },\n                deaths: { total: 7000 },\n                reportDate: \"2020-02-15\"\n            },\n            {\n                confirmed: { total: 60000 },\n                deaths: { total: 13000 },\n                reportDate: \"2020-02-20\"\n            }\n        ];\n        const modifiedData = data.map(dailyData => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate\n        }));\n        return modifiedData;\n    } catch (error) {\n        alert(error.response?.data?.error?.message);\n    }\n}\n\nexport async function fetchCountries() {\n    try {\n        const { data: { countries } } = await axios.get(`${url}/countries`);\n        const modifiedData = countries.map(country => country.name);\n        return modifiedData;\n    } catch (error) {\n        alert(error.response?.data?.error?.message);\n    }\n}","import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport './Cards.css';\n\nconst cardsData = {\n    infected: {\n        title: \"Infected\",\n        text: \"No. of active cases of COVID-19\"\n    },\n    recovered: {\n        title: \"Recovered\",\n        text: \"No. of recoveries from COVID-19\"\n    },\n    deaths: {\n        title: \"Deaths\",\n        text: \"No. of deaths caused by COVID-19\"\n    }\n};\n\nfunction Cards(props) {\n    const { data: { confirmed, deaths, recovered, lastUpdate } } = props;\n    if (!confirmed || !deaths || !recovered) return 'Loading...';\n    const date = new Date(lastUpdate).toDateString();\n    return (\n        <div className=\"cards-container\">\n            <Grid container spacing={3} justify=\"center\">\n                {\n                    Object.keys(cardsData).map((item, index) => {\n                        return (\n                            <Grid item xs={12} md={3} key={index} component={Card} className={`card ${item}`}>\n                                <CardContent>\n                                    <Typography color=\"textSecondary\" gutterBottom>{cardsData[item].title}</Typography>\n                                    <Typography variant=\"h6\">\n                                        <CountUp\n                                            start={0}\n                                            end={confirmed.value}\n                                            duration={2.5}\n                                            separator=\",\"\n                                        />\n                                    </Typography>\n                                    <Typography color=\"textSecondary\">{date}</Typography>\n                                    <Typography variant=\"body2\">{cardsData[item].text}</Typography>\n                                </CardContent>\n                            </Grid>\n                        );\n                    })\n                }\n            </Grid>\n        </div>\n    );\n}\n\nexport default Cards;","import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api/index';\nimport { Line, Bar } from 'react-chartjs-2';\nimport './Chart.css';\n\nfunction Chart(props) {\n    const { data, data: { confirmed, recovered, deaths }, country } = props;\n    const [dailyData, setDailyData] = useState([]);\n    useEffect(() => {\n        const fetchDailyDataAPI = async () => {\n            setDailyData(await fetchDailyData());\n        };\n        fetchDailyDataAPI();\n    }, []);\n    const lineChart = (\n        dailyData?.length ?\n            <Line\n                data={{\n                    labels: dailyData.map(({ date }) => date),\n                    datasets: [\n                        {\n                            data: dailyData.map(({ confirmed }) => confirmed),\n                            label: 'Infected',\n                            borderColor: '#3333ff',\n                            fill: true\n                        },\n                        {\n                            data: dailyData.map(({ deaths }) => deaths),\n                            label: 'Deaths',\n                            borderColor: 'red',\n                            backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                            fill: true\n                        }\n                    ]\n                }}\n            /> : null\n    );\n    const barchart = (\n        data.confirmed ?\n            <Bar\n                data={{\n                    labels: ['Infected', 'Recovered', 'Deaths'],\n                    datasets: [{\n                        label: 'People',\n                        backgroundColor: [\n                            'rgba(0, 0, 255, 0.5)',\n                            'rgba(0, 255, 0, 0.5)',\n                            'rgba(255, 0, 255, 0.5)'\n                        ],\n                        data: [confirmed.value, recovered.value, deaths.value]\n                    }]\n                }}\n                options={{\n                    legend: { display: false },\n                    title: { display: true, text: `Current state in a ${country}` }\n                }}\n            /> : null\n    );\n    return (\n        <div className=\"chart-conatiner\">\n            {country ? barchart : lineChart}\n        </div>\n    );\n}\n\nexport default Chart;","import React, { useEffect, useState, useCallback } from 'react';\nimport { fetchCountries } from '../../api/index';\nimport { NativeSelect, FormControl } from '@material-ui/core';\nimport './CountryPicker.css';\n\nfunction CountryPicker(props) {\n    const { handleCountires } = props;\n    const [countries, setCountries] = useState([]);\n    useEffect(() => {\n        (async function getCountires() {\n            setCountries(await fetchCountries());\n        })();\n    }, []);\n    const selectedCountry = useCallback((event) => { handleCountires(event.target.value) }, [handleCountires])\n    return (\n        <FormControl className=\"pick-country\">\n            <NativeSelect defaultValue=\"\" onChange={selectedCountry}>\n                <option value=\"\">Global</option>\n                {countries?.length &&\n                    countries.map((country, index) => {\n                        return (<option value={country} key={index}>{country}</option>);\n                    })\n                }\n            </NativeSelect>\n        </FormControl>\n    );\n}\n\nexport default CountryPicker;","import React, { Component } from 'react';\nimport { fetchData } from './api';\nimport { Cards, Chart, CountryPicker } from './components';\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: {},\n            country: ''\n        };\n        this.handleCountires = this.handleCountires.bind(this);\n    }\n    async componentDidMount() {\n        const fetchedData = await fetchData();\n        (() => { this.setState({ data: fetchedData }); })();\n    }\n\n    async handleCountires(chosenCountry) {\n        const fetchedData = await fetchData(chosenCountry);\n        this.setState({ data: fetchedData, country: chosenCountry });\n        console.log(fetchedData);\n    }\n\n    render() {\n        const { data, country } = this.state;\n        return (\n            <div className=\"container\">\n                <img className=\"covid-img\" src=\"https://i.ibb.co/7QpKsCX/image.png\" alt=\"coron-icon\" />\n                <Cards data={data} />\n                <CountryPicker handleCountires={this.handleCountires} />\n                <Chart data={data} country={country} />\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}